/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */
fun main() {
    var i = 1L
    val limit = 500L

    while (true) {
        val triangleNumber = getTriangleNumber(i)
        val divisorCount = triangleNumber.getDivisorCount()
        if (divisorCount > limit) {
            println(triangleNumber)
            return
        }
        i++
    }
}

fun getTriangleNumber(index: Long) = index * (index + 1) / 2

fun Long.getDivisorCount(): Int {
    var limit = this
    var numberOfDivisors = 0

    if (this == 1L) return 1

    var i = 1L
    while (i < limit) {
        if (this % i == 0L) {
            limit = this / i
            if (limit != i) numberOfDivisors++
            numberOfDivisors++
        }
        i++
    }

    return numberOfDivisors
}