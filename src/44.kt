import java.lang.Long.min
import java.util.*
import kotlin.math.sqrt

/**
 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
 *
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
 *
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj|
 * is minimised; what is the value of D?
 */
fun main() {
    val limit = 10_000
    val pentagonalNumbers = (1L..limit).map { getPentagonalNumber(it) }.toLongArray()

    var minDifference = Long.MAX_VALUE

    for (j in 0 until limit - 1) {
        for (k in (j + 1) until limit) {
            val pj = pentagonalNumbers[j]
            val pk = pentagonalNumbers[k]
            val difference = pk - pj
//            val indexOfDifference = Arrays.binarySearch(pentagonalNumbers, difference)
            val indexOfDifference = difference.getPentagonalNumberIndex()
            if (indexOfDifference >= 0) {
                val sum = pk + pj
//                val indexOfSum = Arrays.binarySearch(pentagonalNumbers, sum)
                val indexOfSum = sum.getPentagonalNumberIndex()
                if (indexOfSum >= 0) {
                    println("p${j + 1} + p${k + 1} = $pj + $pk = $sum = p${indexOfSum + 1}")
                    println("p${k + 1} - p${j + 1} = $pk - $pj = $difference = p${indexOfDifference + 1}")
                    minDifference = min(minDifference, difference)
                }
            }
        }
    }

    println("=====")
    println(minDifference)
}

fun getPentagonalNumber(n: Long) = n * (3 * n - 1) / 2

fun Long.getPentagonalNumberIndex(): Int {
    val n = ((sqrt((24 * this + 1).toDouble()) + 1) / 6).toLong()
    return if (getPentagonalNumber(n) == this) n.toInt() else -1
}